CREATE OR REPLACE TEMPORARY TABLE PLAN_LOB_UPC_WK AS
SELECT
    CONCAT(A.PLAN_ID,'_',A.INVOICE_LOB,'_',A.BENEFIT_UPC) PLAN_LOB_UPC,
    DATE_TRUNC('WEEK', DATEADD(DAY, 1, A.ORDER_DATE)) - INTERVAL'1 DAY' ORDER_DATE,
    SUM(A.ITEMS_QTY) AS ITEMS_QTY
FROM
    CORE_FSSC.CURATED_OTCHS.DAY_PLAN_OS_SALES_ITEM A
WHERE 
    A.PLAN_ID <> 0
    AND A.OS NOT IN ('Store')
    AND ORDER_DATE::DATE BETWEEN TO_DATE('2023-12-31') AND TO_DATE('2024-10-05')
GROUP BY 1,2
ORDER BY 1,2
;



CREATE OR REPLACE TEMPORARY TABLE WEEKS AS
SELECT DISTINCT
    START_DT DATE_DT, 
    FISCAL_WEEK_NBR WEEK_NBR
FROM 
    CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK
WHERE 1=1
    AND DATE_DT::DATE BETWEEN TO_DATE('2023-12-31') AND TO_DATE('2024-10-05') --DATEADD(day, -1 * (EXTRACT(DAYOFWEEK_ISO FROM CURRENT_DATE()) % 7 + 1), CURRENT_DATE())
order by 1,2
;



CREATE OR REPLACE TEMPORARY TABLE PLAN_WEEKS AS
SELECT DISTINCT
    A.PLAN_LOB_UPC,
    B.DATE_DT
FROM
    PLAN_LOB_UPC_WK A,
    WEEKS B
ORDER BY 1,2
;



CREATE OR REPLACE TEMPORARY TABLE PLAN_MIN_WEEKS AS
SELECT DISTINCT
    A.PLAN_LOB_UPC,
    MIN(A.ORDER_DATE) MIN_WEEK_DT
FROM
    PLAN_LOB_UPC_WK A
GROUP BY 1
ORDER BY 1, 2
;



CREATE OR REPLACE TEMPORARY TABLE PLAN_ALL_WEEKS AS
SELECT DISTINCT
    A.PLAN_LOB_UPC,
    A.DATE_DT,
    B.MIN_WEEK_DT
FROM
    PLAN_WEEKS A
LEFT JOIN
    PLAN_MIN_WEEKS B ON A.PLAN_LOB_UPC = B.PLAN_LOB_UPC AND A.DATE_DT >= B.MIN_WEEK_DT
WHERE   
    B.MIN_WEEK_DT IS NOT NULL
ORDER BY 1,2,3
;

---------------------------------

CREATE OR REPLACE TEMPORARY TABLE DC_HYP_INPUT AS
SELECT 
    A.PLAN_LOB_UPC,
    A.DATE_DT,
    TO_DOUBLE(IFNULL(B.ITEMS_QTY,0)) ITEMS_QTY
FROM
    PLAN_ALL_WEEKS A
LEFT JOIN
    PLAN_LOB_UPC_WK B ON A.PLAN_LOB_UPC = B.PLAN_LOB_UPC AND A.DATE_DT = B.ORDER_DATE
ORDER BY 1,2
;

-------------------------------------------------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DC_HYP_OUTPUT1 AS
SELECT p.*
FROM DC_HYP_INPUT
    ,TABLE(OTCHS_HYPERPARAMS_FINDER1("PLAN_LOB_UPC","DATE_DT", "ITEMS_QTY") OVER (PARTITION BY "PLAN_LOB_UPC")) p
;



CREATE OR REPLACE TEMPORARY TABLE DC_FCST_INPUT1 AS
SELECT
    TO_CHAR(A.PLAN_LOB_UPC) PLAN_LOB_UPC,
    A.DATE_DT,
    TO_DOUBLE(A.ITEMS_QTY) ITEMS_QTY,
    TO_CHAR(B.BEST_PARAMS) BEST_PARAMS
FROM
    DC_HYP_INPUT A    
LEFT JOIN
    DC_HYP_OUTPUT1 B ON A.PLAN_LOB_UPC = B.PLAN_STR
WHERE 
    NOT STARTSWITH(B.BEST_PARAMS, 'Error')
;



CREATE OR REPLACE TEMPORARY TABLE DC_SALES_FCST_OUTPUT1 AS
SELECT p.*
FROM DC_FCST_INPUT1
    , TABLE(OTCHS_SALES_FORECAST("PLAN_LOB_UPC","DATE_DT", "ITEMS_QTY", 26, "BEST_PARAMS") OVER (PARTITION BY "PLAN_LOB_UPC")) p
;


CREATE OR REPLACE TEMPORARY TABLE PLAN_LOB_OUTPUT1 AS
SELECT
    A.PLAN_STR,
    MAX(A.FORECAST_QTY) MAX_FCST,
    MAX(B.ITEMS_QTY) MAX_OBS,
    (MAX(A.FORECAST_QTY) - MAX(B.ITEMS_QTY)) DIFF
FROM
    DC_SALES_FCST_OUTPUT1 A
LEFT JOIN
    DC_HYP_INPUT B ON A.PLAN_STR = B.PLAN_LOB_UPC
GROUP BY 1
HAVING 
    DIV0NULL(ABS(MAX(A.FORECAST_QTY) - MAX(B.ITEMS_QTY)), MAX(B.ITEMS_QTY))<=1
ORDER BY 4 
;



CREATE OR REPLACE TEMPORARY TABLE DC_FCST_OUTPUT1 AS
SELECT
    * 
FROM DC_SALES_FCST_OUTPUT1
WHERE
    PLAN_STR IN (SELECT DISTINCT PLAN_STR FROM PLAN_LOB_OUTPUT1)
;

----------------------------------------------------------------------------------------
CREATE OR REPLACE TEMPORARY TABLE DC_HYP_INPUT2 AS
SELECT
    *
FROM 
    DC_HYP_INPUT
WHERE
    PLAN_LOB_UPC NOT IN (SELECT DISTINCT PLAN_STR FROM DC_FCST_OUTPUT1) 
;


CREATE OR REPLACE TEMPORARY TABLE DC_HYP_OUTPUT2 AS
SELECT p.*
FROM DC_HYP_INPUT2
    ,TABLE(OTCHS_HYPERPARAMS_FINDER2("PLAN_LOB_UPC","DATE_DT", "ITEMS_QTY") OVER (PARTITION BY "PLAN_LOB_UPC")) p
;



CREATE OR REPLACE TEMPORARY TABLE DC_FCST_INPUT2 AS
SELECT
    TO_CHAR(A.PLAN_LOB_UPC) PLAN_LOB_UPC,
    A.DATE_DT,
    TO_DOUBLE(A.ITEMS_QTY) ITEMS_QTY,
    TO_CHAR(B.BEST_PARAMS) BEST_PARAMS
FROM
    DC_HYP_INPUT2 A    
LEFT JOIN
    DC_HYP_OUTPUT2 B ON A.PLAN_LOB_UPC = B.PLAN_STR
WHERE 
    NOT STARTSWITH(B.BEST_PARAMS, 'Error')
;



CREATE OR REPLACE TEMPORARY TABLE DC_SALES_FCST_OUTPUT2 AS
SELECT p.*
FROM DC_FCST_INPUT2
    , TABLE(OTCHS_SALES_FORECAST("PLAN_LOB_UPC","DATE_DT", "ITEMS_QTY", 26, "BEST_PARAMS") OVER (PARTITION BY "PLAN_LOB_UPC")) p
;


CREATE OR REPLACE TEMPORARY TABLE PLAN_LOB_OUTPUT2 AS
SELECT
    A.PLAN_STR,
    MAX(A.FORECAST_QTY) MAX_FCST,
    MAX(B.ITEMS_QTY) MAX_OBS,
    (MAX(A.FORECAST_QTY) - MAX(B.ITEMS_QTY)) DIFF
FROM
    DC_SALES_FCST_OUTPUT2 A
LEFT JOIN
    DC_HYP_INPUT2 B ON A.PLAN_STR = B.PLAN_LOB_UPC
GROUP BY 1
HAVING 
    DIV0NULL(ABS(MAX(A.FORECAST_QTY) - MAX(B.ITEMS_QTY)), MAX(B.ITEMS_QTY))<=1
ORDER BY 4 
;



CREATE OR REPLACE TEMPORARY TABLE DC_FCST_OUTPUT2 AS
SELECT
    * 
FROM DC_SALES_FCST_OUTPUT2
WHERE
    PLAN_STR IN (SELECT DISTINCT PLAN_STR FROM PLAN_LOB_OUTPUT2)
;

---------------------------------------------------------------------------------------------
CREATE OR REPLACE TEMPORARY TABLE DC_HYP_INPUT3 AS
SELECT
    *
FROM 
    DC_HYP_INPUT
WHERE
    PLAN_LOB_UPC NOT IN (SELECT DISTINCT PLAN_STR FROM DC_FCST_OUTPUT1) 
    AND PLAN_LOB_UPC NOT IN (SELECT DISTINCT PLAN_STR FROM DC_FCST_OUTPUT2)
;


CREATE OR REPLACE TEMPORARY TABLE DC_FCST_OUTPUT3 AS
SELECT p.*
FROM DC_HYP_INPUT3
    , TABLE(OTCHS_SALES_MA_FCST_PLAN_WK("PLAN_LOB_UPC","DATE_DT", "ITEMS_QTY", 26, 4) OVER (PARTITION BY "PLAN_LOB_UPC")) p
;

------------------------------------------------------------------------------------
CREATE OR REPLACE TEMPORARY TABLE DC_SALES_FCST_OUTPUT AS
SELECT * FROM DC_FCST_OUTPUT1
UNION ALL
SELECT * FROM DC_FCST_OUTPUT2
UNION ALL
SELECT * FROM DC_FCST_OUTPUT3
;




--------------------------------------------THIS THE NON-STATE FORECAST
 
CREATE OR REPLACE TEMPORARY TABLE OTCHS_FCST_PLAN_BENEFIT_WK AS
SELECT 
    SUBSTRING(PLAN_STR, 1, POSITION('_' IN PLAN_STR)-1) PLAN_ID,
    SPLIT_PART(PLAN_STR,'_',2) AS INVOICE_LOB,
    SUBSTRING(PLAN_STR, LENGTH(PLAN_STR) - POSITION('_' IN REVERSE(PLAN_STR))+2) BENEFIT_UPC,
    A.FORECAST_DATE ORDER_DATE,
    B.FISCAL_WEEK_NBR WEEK_NBR,
    FORECAST_QTY FORECAST_UNITS
FROM
    DC_SALES_FCST_OUTPUT A
LEFT JOIN
    CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK B ON A.FORECAST_DATE = B.START_DT
;

 
---------------------------STATE-LEVEL SPREADING--------------------
 
CREATE OR REPLACE TEMPORARY TABLE PLAN_LOB_STATE_PROP AS
SELECT 
    TO_CHAR(PLAN_ID) PLAN_ID,
    A.INVOICE_LOB,
    A.BENEFIT_UPC,
    A.STATE_CD,
    SUM(A.ITEMS_QTY) AS ITEMS_QTY
FROM
    CORE_FSSC.CURATED_OTCHS.DAY_PLAN_OS_SALES_ITEM A,
    CORE_FSSC.CURATED_CALENDAR.DAY B
WHERE 
    A.ORDER_DATE = B.DATE_DT
    AND PLAN_ID <> 0
    AND B.FISCAL_WEEK_NBR BETWEEN 202401 AND 202426 
    AND OS NOT IN ('Store')
    AND STATE_CD <> 'NULL'
GROUP BY 1,2,3,4
;
 

--get the plan/lob/UPC totals
CREATE OR REPLACE TEMPORARY TABLE PLAN_LOB_STATE_PROP2 AS
SELECT
    BENEFIT_UPC,
    PLAN_ID,
    INVOICE_LOB,
    SUM(ITEMS_QTY) AS ITEMS_QTY
FROM
    PLAN_LOB_STATE_PROP 
WHERE
    STATE_CD <> 'NULL'
GROUP BY
    BENEFIT_UPC,
    PLAN_ID,
    INVOICE_LOB
;


--left join the two to figure out proportion of upc/plan id/lob by state
CREATE OR REPLACE TEMPORARY TABLE PLAN_LOB_STATE_PROP3 AS 
SELECT 
    A.*,
    B.ITEMS_QTY AS TOTAL_ITEMS_QTY,
    DIV0NULL(A.ITEMS_QTY,B.ITEMS_QTY) AS PROPORTION
FROM
    PLAN_LOB_STATE_PROP A,
    PLAN_LOB_STATE_PROP2 B
WHERE
    A.BENEFIT_UPC = B.BENEFIT_UPC
    AND A.INVOICE_LOB = B.INVOICE_LOB
    AND A.PLAN_ID = B.PLAN_ID
ORDER BY
    A.BENEFIT_UPC,
    A.PLAN_ID,
    A.INVOICE_LOB
;
 
----------------THIS IS THE STATE-LEVEL FORECAST--------------------
 
CREATE OR REPLACE TEMPORARY TABLE OTCHS_FCST_PLAN_UPC_WK_LOB_ST
AS
SELECT 
    A.INVOICE_LOB,
    A.PLAN_ID,
    A.BENEFIT_UPC,
    A.ORDER_DATE,
    A.WEEK_NBR,
    B.STATE_CD,
    A.FORECAST_UNITS * B.PROPORTION AS FORECAST_UNITS
FROM
    OTCHS_FCST_PLAN_BENEFIT_WK A,
    PLAN_LOB_STATE_PROP3 B
WHERE
    A.BENEFIT_UPC = B.BENEFIT_UPC
    AND A.PLAN_ID = B.PLAN_ID
    AND A.INVOICE_LOB = B.INVOICE_LOB
;
 
--SELECT SUM(FORECAST_UNITS) FROM OTCHS_FCST_PLAN_BENEFIT_WK;  --65,462,679   --43,810,149
--SELECT SUM(FORECAST_UNITS) FROM OTCHS_FCST_PLAN_UPC_WK_LOB_ST; --65,462,679  --43,810,149
 
 
----------------ATTRIBUTE STATE LEVEL FORECAST TO DCs BASED ON THE STATE-PLAN-LOB-MAPPING---------------------
 
 
CREATE OR REPLACE TEMPORARY TABLE OTC_FCST_PLN_UPC_WK_LOB_ST_DC AS
SELECT 
A.*,
NVL(B.DC_ID,'NO_MATCH') DC_ID,
NVL(B.NCPDP_IND,'NO_MATCH') NCPDP_IND,
NVL(B.ACT_IND,'NO_MATCH') ACT_IND,
NVL(B.OMS_DEFAULT_DC_ID,'NO_MATCH') OMS_DEFAULT_DC_ID
FROM 
(SELECT * FROM OTCHS_FCST_PLAN_UPC_WK_LOB_ST WHERE PLAN_ID IN (SELECT PLAN_ID FROM CORE_FSSC.CURATED_OTCHS.PLAN_CODE WHERE FC_IND = 'I')) A,   --change plan code and plan lob state dc here
CORE_FSSC.CURATED_OTCHS.PLAN_LOB_STATE_DC B --change plan code and plan lob state dc here
WHERE
A.PLAN_ID = B.PLAN_ID
AND A.INVOICE_LOB = B.INVOICE_LOB
AND A.STATE_CD = B.STATE_CD 
;
 


CREATE OR REPLACE TEMPORARY TABLE OTC_FCST_PLN_UPC_WK_LOB_ST_DC2 AS
SELECT 
A.*,
NVL(B.DC_ID,'NO_MATCH') DC_ID,
NVL(B.NCPDP_IND,'NO_MATCH') NCPDP_IND,
NVL(B.ACT_IND,'NO_MATCH') ACT_IND,
NVL(B.OMS_DEFAULT_DC_ID,'NO_MATCH') OMS_DEFAULT_DC_ID
FROM 
(SELECT * FROM OTCHS_FCST_PLAN_UPC_WK_LOB_ST WHERE PLAN_ID NOT IN (SELECT PLAN_ID FROM CORE_FSSC.CURATED_OTCHS.PLAN_CODE WHERE FC_IND = 'I')) A, --change plan code and plan lob state dc here
CORE_FSSC.CURATED_OTCHS.PLAN_LOB_STATE_DC B   --need to add to batch updater                                                                    --change plan code and plan lob state dc here
WHERE
A.PLAN_ID = B.PLAN_ID
AND A.STATE_CD = B.STATE_CD
;
 
--NOW UNION ALL
 
   ----------------- FINAL FORECAST-------------------
CREATE OR REPLACE TEMPORARY TABLE OTC_FCST_PLN_UPC_WK_LOB_ST_FIN AS
SELECT * FROM OTC_FCST_PLN_UPC_WK_LOB_ST_DC
UNION ALL
SELECT * FROM OTC_FCST_PLN_UPC_WK_LOB_ST_DC2
;
------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
CREATE OR REPLACE TEMPORARY TABLE OTC_FCST_UPC_WK_DC_ADJ_DC AS
SELECT 
    CASE
        WHEN DC_ID IN ('OR','NV') THEN 10735
        WHEN DC_ID = 'KC' THEN 11458
        WHEN DC_ID = 'MA' THEN 11511
        WHEN DC_ID = 'BV' THEN 11512   
    END AS STORE_NBR, 
    A.BENEFIT_UPC,
    B.SKU_NBR,
    C.CATEGORY_NBR,
    A.WEEK_NBR,
    SUM(A.FORECAST_UNITS) EA_FORECAST
FROM 
    OTC_FCST_PLN_UPC_WK_LOB_ST_FIN A,
(SELECT BENEFIT_UPC, SKU_NBR FROM CORE_FSSC.CURATED_OTCHS.BENEFIT_UPC_SKU WHERE YEAR = 2024 AND PRIMARY_IND = 'Y') B,
    CORE_FSSC.CURATED_PRODUCT.SKU C
WHERE
    A.BENEFIT_UPC = B.BENEFIT_UPC
    AND B.SKU_NBR = C.SKU_NBR
    AND A.DC_ID <> 'NO_MATCH'
GROUP BY 1,2,3,4,5
;




CREATE OR REPLACE TEMPORARY TABLE FULFILLED_PROP_CAT_DC AS
SELECT 
    CATEGORY_NBR,
    CASE
        WHEN DC_ID IN ('OR','NV') THEN 10735
        WHEN DC_ID = 'KC' THEN 11458
        WHEN DC_ID = 'MA' THEN 11511
        WHEN DC_ID = 'BV' THEN 11512   --AKA Tolleson
    END AS STORE_NBR, 
    SUM(A.ITEMS_QTY) / (SELECT COUNT (DISTINCT FISCAL_WEEK_NBR) FROM CORE_FSSC.CURATED_CALENDAR.DAY WHERE FISCAL_WEEK_NBR BETWEEN 202401 AND 202426) AS SHIP_ITEMS_QTY_WKLY
FROM
    CORE_FSSC.CURATED_OTCHS.DAY_DC_PLAN_FC_ITEM A,
    CORE_FSSC.CURATED_CALENDAR.DAY B,
    CORE_FSSC.CURATED_PRODUCT.SKU C
WHERE 
    A.ORDER_DATE = B.DATE_DT
    AND A.SKU_NBR = C.SKU_NBR
    AND A.PLAN_ID <> 0
    AND B.FISCAL_WEEK_NBR BETWEEN 202401 AND 202426 ---update this
    AND A.DC_ID NOT IN ('FS')

GROUP BY 1,2
;



 
CREATE OR REPLACE TABLE FCST_PROP_CAT_DC AS
SELECT 
    B.CATEGORY_NBR,
    STORE_NBR,
    SUM(A.EA_FORECAST)/ 26 AS FCST_ITEMS_QTY_WKLY  --26
FROM
    OTC_FCST_UPC_WK_DC_ADJ_DC A, 
    CORE_FSSC.CURATED_PRODUCT.SKU B
WHERE A.SKU_NBR = B.SKU_NBR
GROUP BY 1,2
;


--SELECT STORE_NBR, SUM(FCST_ITEMS_QTY_WKLY) FROM FCST_PROP GROUP BY STORE_NBR;        --45,610,291
 

CREATE OR REPLACE TABLE SHIPPED_FCST_ADJUST_CAT_DC AS
SELECT
    A.CATEGORY_NBR,
    A.STORE_NBR,
    SHIP_ITEMS_QTY_WKLY,
    FCST_ITEMS_QTY_WKLY,
    CASE WHEN B.SHIP_ITEMS_QTY_WKLY IS NOT NULL AND DIV0NULL(B.SHIP_ITEMS_QTY_WKLY,A.FCST_ITEMS_QTY_WKLY) < 2 THEN DIV0NULL(B.SHIP_ITEMS_QTY_WKLY,A.FCST_ITEMS_QTY_WKLY) ELSE 2 END AS ADJUSTER
FROM
    FCST_PROP_CAT_DC A,
    FULFILLED_PROP_CAT_DC B
WHERE
    A.STORE_NBR = B.STORE_NBR
    AND A.CATEGORY_NBR = B.CATEGORY_NBR
;
 


CREATE OR REPLACE TABLE OTC_FCST_UPC_WK_DC_ADJ_CAT_DC AS 
SELECT 
    C.START_DT DATE_DT,
    A.WEEK_NBR,
    A.SKU_NBR,
    A.STORE_NBR,
    A.EA_FORECAST AS FORECAST_ORIG,
    --A.EA_FORECAST * POWER(ADJUSTER,1/1.5) * 1.00 AS EA_FORECAST
    A.EA_FORECAST * ADJUSTER * 1.00 AS EA_FORECAST
FROM
    OTC_FCST_UPC_WK_DC_ADJ_DC A,
    SHIPPED_FCST_ADJUST_CAT_DC B,
    CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK C
WHERE 
A.STORE_NBR = B.STORE_NBR
AND A.CATEGORY_NBR = B.CATEGORY_NBR
AND A.WEEK_NBR = C.FISCAL_WEEK_NBR
;  


--------------------------------------------------------------------------------------------------

CREATE OR REPLACE TABLE DC_SALES_FCST_1 AS
SELECT
    A.DATE_DT ORDER_DATE,
    A.WEEK_NBR,
    'DC CUSTOM OS FORECAST' MODEL,
    A.SKU_NBR,
    B.CATEGORY_DSC,
    A.STORE_NBR,
    CASE 
        WHEN A.STORE_NBR = 10735 THEN 'OR' 
        WHEN A.STORE_NBR = 11458 THEN 'KC' 
        WHEN A.STORE_NBR = 11511 THEN 'MA'
        WHEN A.STORE_NBR = 11512 THEN 'BV'
    END DC_ID,
    A.EA_FORECAST ITEMS_QTY
FROM 
    OTC_FCST_UPC_WK_DC_ADJ_CAT_DC A  
LEFT JOIN
    CORE_FSSC.CURATED_PRODUCT.SKU B ON A.SKU_NBR = B.SKU_NBR
ORDER BY 1,2,4,5
;




CREATE OR REPLACE TABLE DC_SALES_HISTORY_FC AS
SELECT 
    DATE_TRUNC('WEEK', DATEADD(DAY, 1, A.ORDER_DATE)) - INTERVAL'1 DAY' ORDER_DATE,
    B.WEEK_NBR,
    'DC FC SALES HISTORY' MODEL,
    A.SKU_NBR,
    C.CATEGORY_DSC,
    CASE
        WHEN DC_ID IN ('OR','NV') THEN 10735
        WHEN DC_ID = 'KC' THEN 11458
        WHEN DC_ID = 'MA' THEN 11511
        WHEN DC_ID = 'BV' THEN 11512   
    END AS STORE_NBR,
    A.DC_ID,
    SUM(A.ITEMS_QTY) ITEMS_QTY
FROM 
    CORE_FSSC.CURATED_OTCHS.DAY_DC_PLAN_FC_ITEM A,
    WEEKS B,
    CORE_FSSC.CURATED_PRODUCT.SKU C
WHERE
    DATE_TRUNC('WEEK', DATEADD(DAY, 1, A.ORDER_DATE)) - INTERVAL'1 DAY' = B.DATE_DT
    AND A.PLAN_ID <> 0
    AND A.DC_ID NOT IN ('FS')
    AND CONCAT(A.PLAN_ID,'_',A.INVOICE_LOB,'_',A.BENEFIT_UPC) IN (SELECT PLAN_LOB_UPC FROM PLAN_LOB_UPC_WK)
    AND A.SKU_NBR = C.SKU_NBR
GROUP BY 1,2,4,5,6,7
;

----------------------------------------------------------------------------------------------

CREATE OR REPLACE TABLE OTCHS_DC_BY_FCST AS
SELECT
    DATE_TRUNC('WEEK', DATEADD(DAY, 1, A.FORECAST_START_DT)) - INTERVAL'1 DAY' ORDER_DATE,
    B.FISCAL_WEEK_NBR WEEK_NBR,
    'BY FORECAST' MODEL,
    A.SKU_NBR,
    C.CATEGORY_DSC,
    A.STORE_NBR,
    CASE 
        WHEN A.STORE_NBR = 10735 THEN 'OR' 
        WHEN A.STORE_NBR = 11458 THEN 'KC' 
        WHEN A.STORE_NBR = 11511 THEN 'MA'
        WHEN A.STORE_NBR = 11512 THEN 'BV'
    END DC_ID, 
    SUM(A.FORECAST_QTY) ITEMS_QTY
FROM 
    SEM_FSSC.COMMON_FSSC.JDFR_FCST_DT_STR_SKU_26_ALL_V A
LEFT JOIN
    CORE_FSSC.CURATED_CALENDAR.FISCAL_WEEK B ON A.FORECAST_START_DT = B.START_DT
LEFT JOIN
    CORE_FSSC.CURATED_PRODUCT.SKU C ON A.SKU_NBR = C.SKU_NBR
WHERE 
    A.STORE_NBR IN (10735, 11458, 11511, 11512)
    AND B.FISCAL_WEEK_NBR >= 202432
    AND A.FORECAST_TYPE_CD IN (1,4)
GROUP BY 1,2,4,5,6
;






CREATE OR REPLACE TABLE DC_SALES_FCST_AVG AS
SELECT
    A.ORDER_DATE,
    A.WEEK_NBR,
    'DC CUSTOM AVG FORECAST' MODEL,
    A.SKU_NBR,
    A.CATEGORY_DSC,
    A.STORE_NBR,
    A.DC_ID, 
    CASE WHEN A.ITEMS_QTY IS NOT NULL AND B.ITEMS_QTY IS NOT NULL THEN (A.ITEMS_QTY+B.ITEMS_QTY)/2
         WHEN B.ITEMS_QTY IS NOT NULL THEN B.ITEMS_QTY
         WHEN A.ITEMS_QTY IS NOT NULL THEN A.ITEMS_QTY ELSE NULL
    END AS ITEMS_QTY    
FROM 
    DC_SALES_FCST_2  A
LEFT JOIN
    DC_SALES_FCST_1 B ON A.WEEK_NBR = B.WEEK_NBR AND A.SKU_NBR=B.SKU_NBR AND A.STORE_NBR=B.STORE_NBR AND A.DC_ID=B.DC_ID
;


CREATE OR REPLACE TABLE OTCHS_DC_FCST_LIFTS AS
SELECT
    A.ORDER_DATE,
    A.WEEK_NBR,
    'UPDATED BY FCST' MODEL,
    A.SKU_NBR,
    A.CATEGORY_DSC,
    A.STORE_NBR,
    A.DC_ID,
    GREATEST(IFNULL(A.ITEMS_QTY,0),IFNULL(B.ITEMS_QTY,0)) ITEMS_QTY    
FROM 
    OTCHS_DC_BY_FCST  A,
    DC_SALES_FCST_AVG B
WHERE
    A.WEEK_NBR = B.WEEK_NBR AND A.SKU_NBR=B.SKU_NBR AND A.STORE_NBR=B.STORE_NBR AND A.DC_ID=B.DC_ID AND A.ORDER_DATE=B.ORDER_DATE
;


--CREATE OR REPLACE TABLE OTCHS_DC_FORECAST AS
CREATE OR REPLACE TEMPORARY TABLE OTCHS_DC_STAGE AS
SELECT * FROM OTCHS_DC_BY_FCST
UNION ALL
SELECT * FROM DC_SALES_HISTORY_FC
UNION ALL
SELECT * FROM DC_SALES_HISTORY_OS
UNION ALL
SELECT * FROM DC_SALES_FCST_1 --OS
UNION ALL
SELECT * FROM DC_SALES_FCST_2 --FC
UNION ALL
SELECT * FROM DC_SALES_FCST_AVG
UNION ALL
SELECT * FROM OTCHS_DC_FCST_LIFTS
;



MERGE INTO OTCHS_DC_FORECAST AS stg
USING ( 
    SELECT * 
    FROM 
        OTCHS_DC_STAGE 
    ) AS src

ON stg.SKU_NBR = src.SKU_NBR
AND stg.STORE_NBR = src.STORE_NBR
AND stg.MODEL = src.MODEL
AND stg.ORDER_DATE = src.ORDER_DATE

WHEN MATCHED THEN
    UPDATE SET
        stg.ITEMS_QTY = src.ITEMS_QTY
WHEN NOT MATCHED THEN
    INSERT (SKU_NBR, CATEGORY_DSC, STORE_NBR, DC_ID, MODEL, ORDER_DATE, WEEK_NBR, ITEMS_QTY)
    VALUES (SKU_NBR, CATEGORY_DSC, STORE_NBR, DC_ID, MODEL, ORDER_DATE, WEEK_NBR, ITEMS_QTY)
;






----------------------------DC SALES DASHBOARD -------------------------------------------------------
CREATE OR REPLACE TABLE OTCHS_DC_FCST_DASHBOARD AS
SELECT
    A.STORE_NBR,
    A.DC_ID,
    TO_CHAR(A.SKU_NBR) SKU_NBR,
    A.CATEGORY_DSC,
    A.MODEL,
    A.ORDER_DATE,
    A.WEEK_NBR,
    SUM(ITEMS_QTY) ITEMS_QTY
FROM
    OTCHS_DC_FORECAST A
WHERE
    MODEL IN ('BY FORECAST','DC CUSTOM AVG FORECAST','DC FC SALES HISTORY','UPDATED BY FCST')
GROUP BY 1,2,3,4,5,6,7
ORDER BY 1,2,3,4,5,6,7
;




---------------------------- DC FORECAST LIFTS -------------------------------------------------------
CREATE OR REPLACE TABLE OTCHS_DC_LIFT_QTY AS
SELECT
    A.STORE_NBR,
    A.SKU_NBR,
    A.ORDER_DATE FORECAST_START_DATE,
    A.WEEK_NBR,
    CASE WHEN A.STORE_NBR=10735 THEN CONCAT('EA_OTCHSDC_NV_',TO_CHAR(A.ORDER_DATE,'YYYYMMDD')) ELSE CONCAT('EA_OTCHSDC_CVS_',TO_CHAR(A.ORDER_DATE,'YYYYMMDD')) END FORECAST_ID,
    CASE WHEN A.STORE_NBR=10735 THEN 'NV' ELSE 'CVS' END ENTITY,
    CASE WHEN A.ITEMS_QTY>=B.ITEMS_QTY THEN 0 ELSE (B.ITEMS_QTY-A.ITEMS_QTY) END ITEMS_QTY
FROM
    (SELECT * FROM OTCHS_DC_FORECAST WHERE MODEL='BY FORECAST') A,
    (SELECT * FROM OTCHS_DC_FORECAST WHERE MODEL='DC CUSTOM AVG FORECAST') B
WHERE
    A.WEEK_NBR = B.WEEK_NBR AND A.SKU_NBR=B.SKU_NBR AND A.STORE_NBR=B.STORE_NBR AND A.DC_ID=B.DC_ID
    AND A.ITEMS_QTY<B.ITEMS_QTY
    AND A.WEEK_NBR BETWEEN 202445 AND 202452 
    AND A.SKU_NBR NOT IN (550147,823994,701505,467735)
ORDER BY 1,2,3,4,5
;


---------------------------- DC ACCURACY CALCULATIONS -------------------------------------------------------
CREATE OR REPLACE TABLE OTCHS_DC_ACCURACY_CALCULATION AS
SELECT
    A.STORE_NBR,
    A.SKU_NBR,
    AVG(A.ITEMS_QTY) AVG_BY_FORECST,
    AVG(B.ITEMS_QTY) AVG_DC_SALES,
    AVG(A.ITEMS_QTY)-AVG(B.ITEMS_QTY) AVG_DIFFERENCE

FROM
    (SELECT * FROM OTCHS_DC_FORECAST WHERE MODEL='BY FORECAST') A,
    (SELECT * FROM OTCHS_DC_FORECAST WHERE MODEL='DC FC SALES HISTORY') B
WHERE
    A.WEEK_NBR = B.WEEK_NBR AND A.SKU_NBR=B.SKU_NBR AND A.STORE_NBR=B.STORE_NBR
    AND A.SKU_NBR NOT IN (550147,823994,701505,467735)
GROUP BY 1,2
ORDER BY 1,2
;

 
select *, ABS(AVG_DIFFERENCE) ABS_DIFF from OTCHS_DC_ACCURACY_CALCULATION
order by 6 desc
limit 100;

/*
CREATE OR REPLACE TEMPORARY TABLE OTCHS_DC_BY_FCST2 AS
select A.*,B.ITEMS_QTY BY_UPD, C.ITEMS_QTY DC_LIFT from OTCHS_DC_BY_FCST2 A, OTCHS_DC_BY_FCST B, OTCHS_DC_LIFT_QTY C
WHERE
    A.WEEK_NBR = B.WEEK_NBR AND A.SKU_NBR=B.SKU_NBR AND A.STORE_NBR=B.STORE_NBR AND A.DC_ID=B.DC_ID
    AND A.WEEK_NBR = C.WEEK_NBR AND A.SKU_NBR=C.SKU_NBR AND A.STORE_NBR=C.STORE_NBR
;
select * from OTCHS_DC_LIFT_QTY

/*
-----------------------WAPE CALCULATION ----------------------------------------------------------
SELECT D.CATEGORY_DSC, A.WEEK_NBR, SUM(A.ITEMS_QTY) ACTUALS, SUM(C.ITEMS_QTY) CUSTOM_FCST, SUM(B.ITEMS_QTY) BY_FCST FROM DC_SALES_HISTORY_FC A, OTCHS_DC_BY_FCST B, DC_SALES_FCST_1 C, CORE_FSSC.CURATED_PRODUCT.SKU D
WHERE
A.STORE_NBR=B.STORE_NBR AND A.STORE_NBR=C.STORE_NBR
AND A.SKU_NBR=B.SKU_NBR AND A.SKU_NBR=C.SKU_NBR
AND A.WEEK_NBR=B.WEEK_NBR AND A.WEEK_NBR=C.WEEK_NBR
AND A.SKU_NBR = D.SKU_NBR 
AND A.WEEK_NBR BETWEEN 202427 AND 202438
--AND A.CATEGORY_DSC = 'ALLERGY REMEDIES'
GROUP BY 1,2
ORDER BY 1,2;
*/
